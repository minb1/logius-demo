
##Transport security
One should secure all APIs assuming they can be accessed from any location on the internet. Information MUST be exchanged over TLS-based secured connections. No exceptions, so everywhere and always. This is [required by law](https://wetten.overheid.nl/BWBR0048156/2023-07-01). One SHOULD follow [the latest NCSC guidelines for TLS](https://english.ncsc.nl/publications/publications/2021/january/19/it-security-guidelines-for-transport-layer-security-2.1)

<span id="api-11"></span>
<div class="rule" id="/transport/tls">
  <p class="rulelab"><strong>/transport/tls</strong>: Secure connections using TLS</p>
  <p>Secure connections using TLS following the latest NCSC guidelines [[NCSC.TLS]].</p>
  <p>Since the connection is always secured, the access method can be straightforward. This allows the application of basic access tokens instead of encrypted access tokens.</p>
</div>

Even when using TLS-based secured connections information in URIs is not secured. URIs can be cached and logged outside of the servers controlled by clients and servers. Any information contained in them should therfor be considered readable by anyone with access to the netwerk being used (in case of the internet the whole world) and MUST NOT contain any sensitive information. Neither client secrets used for authentication, privacy sensitive informations suchs as BSNs nor any other information which should not be shared. Be aware that queries (anything after the '?' in a URI) are also part of an URI.

<span id="api-58"></span>
<div class="rule" id="/transport/no-sensitive-uris">
  <p class="rulelab"><strong>/transport/no-sensitive-uris</strong>: No sensitive information in URIs</p>
  <p>Do not put any sensitive information in URIs</p>
  <p>Even when the connection is secure URIs can be cached and logged, in systems outside the control of client and/or server.</p>
</div>

**How to test**
Sensitive information URIS is not machine testable and therfor not part of automated tests. It should be part of any security audit performed by human experts. 

The usage of TLS is machine testable. The test is designed for maximum automation. To test, adherence to NCSC reccomendations should be tested. The serverside is what will be tested, only control over the server is assumed for testing. A testing client will be employed to test adherence of the server. Supporting any protocols, algorithms, key sizes, options or ciphers dat are deemed insufficient or phase out by NCSC will lead to failure on the automated test. Both positive and negative scenario's are part of the test. Testing that a subset of good and sufficient reccomendations are supported and testing that phase out and insufficient reccomendations are not. A manual exception to the automated test results can be made when phase out reccomendations are supported. The API provider will have to provide clear documentation for the phase out schedule.  
