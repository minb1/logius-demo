
##Result (response)

In case a REST API shall comply to the OGC API Features specification, e.g. for usage in GIS applications, the following applies.

<div class="rule" id="/geo/geojson-response">
  <p class="rulelab"><b>/geo/geojson-response</b>: Support GeoJSON in geospatial API responsess</p>
  <p>For representing 2D geometric information in an API response, use the convention for describing geometry as defined in the GeoJSON format [[rfc7946]]. Support GeoJSON as described in OGC API Features <a href="https://docs.ogc.org/is/17-069r3/17-069r3.html#_requirements_class_geojson">Requirements class 8.3</a> [[ogcapi-features-1]]. </p>
  Example: feature
  <pre class="example">
  Request:
  // GET /collections/gebouwen/items/0308100000022041   HTTP 1.1
  // Content-type: application/geo+json

  Response:
  {
    "type": "Feature",
    "id": "0308100000022041",
    "geometry":  {
      "type": "Point",
      "coordinates": [5.2795,52.1933]
    },
    "properties": {
      "naam": "Paleis Soestdijk",
      ...
    },
    "links": [
      {
        "self": "/collections/gebouwen/items/0308100000022041"
      } 
    ]
  }</pre>

  Example: feature collection
  <pre class="example">
  Request:
  // GET /collections/gebouwen   HTTP 1.1
  // Content-type: application/geo+json

  Response:
  {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "0308100000022041",
        "geometry":  {
          "type": "Point",
          "coordinates": [5.2795,52.1933]
        },
        "properties": {
          "naam": "Paleis Soestdijk",
          ...
        },
        "links": [
          {
            "self": "/collections/gebouwen/0308100000022041"
          } 
        ]
      },
      {
      }
    ],
    "timeStamp" : "2023-02-22T10:32:23Z",
    "numberMatched" : "0308100000022041",
    "numberReturned" : "1",
    "links": [
      {
        "self": "/collections/gebouwen"
      },
      {
        "next": ""
      }
    ]
  }</pre>
  <p>
  Note that:
  
  - The resources' properties (e.g. <code>naam</code>) are passed in the properties object. Depending on the implemented filter capabilities the properties object may contain all or a selection of the resources' properties.
  - The OGC API Features specification provides the possibility to add an array of links to a feature and feature collection, which may contain a self link and in case of a feature collection may contain navigation links.
  </p>
  <h4 class="rulelab">How to test</h4>
  <p>
  Test case 1:
  </p>
  <ul>
    <li>Request a single resource that includes feature content (i.e. coordinates) with response media type <code>application/geo+json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/geo+json</code></li> 
    <li>Validate that the returned document is a GeoJSON Feature document.</li> 
  </ul>
  <p>
  Test case 2:
  </p>
  <ul>
    <li>Request a collection of resources that includes feature content (i.e. coordinates) with response media type <code>application/geo+json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/geo+json</code></li> 
    <li>Validate that the returned document is a GeoJSON FeatureCollection document.</li> 
  </ul>
  <p>
  Test case 3:
  </p>
  <ul>
    <li>Request a single resource that does not include feature content (i.e. coordinates) with response media type <code>application/geo+json</code> or <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
  </ul>
  <p>
  Test case 4:
  </p>
  <ul>
    <li>Request a collection of resources that do not include feature content (i.e. coordinates) with response media type <code>application/geo+json</code> or <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
  </ul>
</div>

In case a REST API does not have to comply to the OGC API Features specification, e.g. for usage in administrative applications, the REST API shall use the JSON data format. If resources contain geometry, the geometry shall be returned as a GeoJSON <code>Geometry</code> object embedded in the resource. The media type <code>application/json</code>  must be supported. This may also apply to other media types <code>application/\*+json</code>, however this depends on the media type specification. If the media type specification prescribes that resource information must be embedded in a JSON structure defined in the media type specification, then the media type should not be supported while it is impossible to comply to that specification with the method described below. The media type <code>application/geo+json</code> should not be supported while the resource does not comply to the GeoJSON specification, i.e. the response does not return a feature or feature collection.
A template for the definition of the schemas for the GeoJSON <code>Geometry</code> object in the responses in OpenAPI definitions is available: [geometryGeoJSON.yaml](https://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/geometryGeoJSON.yaml).
In case a collection of resources is returned, the name of the array containing the resources should be the plural of the resource name.

<span name="api-35"></span>
<div class="rule" id="/geo/embed-geojson-geometry-response">
  <p class="rulelab"><b>/geo/embed-geojson-geometry-response</b>: Embed GeoJSON <code>Geometry</code> object as part of the JSON resource in API responses</p>
  <p>When a JSON (<code>application/json</code>) response contains a geometry, represent it in the same way as the <code>Geometry</code> object of GeoJSON.</p>

  Example: resource containing geometry
  <pre class="example">
  Request:
  // GET /gebouwen/0308100000022041   HTTP 1.1
  // Content-type: application/hal+json

  Response:
  {
    "identificatie": "0308100000022041",
    "naam": "Paleis Soestdijk",
    "geometrie":  {
      "type": "Point",
      "coordinates": [5.2795,52.1933]
    },
    ...,
    "_links": {
      {
        "self": "/gebouwen/0308100000022041"
      }
    }
  }</pre>

 Example: resource containing geometry collection
  <pre class="example">
  Request:
  // GET /gebouwen/0308100000022041   HTTP 1.1
  // Content-type: application/hal+json

  Response:
  {
    "identificatie": "0308100000022041",
    "naam": "Paleis Soestdijk",
    "geometrie": {
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point"
          "coordinates": [5.2795,52.1933]
        },
        {
          "type": "Polygon"
          "coordinates" : [...]
        }
      ]
    },
    ...,
    "_links": {
      {
        "self": "/gebouwen/0308100000022041"
      }
    }
  }</pre>

  Example: collection of resources containing geometry
  <pre class="example">
  Request:
  // GET /gebouwen   HTTP 1.1
  // Content-type: application/hal+json

  Response:
  {
    "gebouwen": [
      {
        "identificatie": "0308100000022041",
        "naam": "Paleis Soestdijk",
        "geometrie":  {
          "type": "Point",
          "coordinates": [5.2795,52.1933]
        }
        ...
        "_links": {
          {
            "self": "/gebouwen/0308100000022041"
          }
        }
      }
    ],
    "_links": {
      {
        "self": "/gebouwen"
      },
      {
        "next": ""
      }
    }
  }</pre>
  <p>
  Note that:
  
  - The resource and resource collection may be [[HAL]] resources and therefore may contain a `_links` object. The `_links` object should contain a self link and in case of a collection also navigation links (e.g. first, next prev, last). In such cases the <code>application/hal+json</code> media type may be used.
  </p>
  <h4 class="rulelab">How to test</h4>
  <p>
  Test case 1:
  </p>
  <ul>
    <li>Request a single resource that contains geometry of GeoJSON <code>Geometry</code> object type: <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code> or <code>MultiPolygon</code> and with response media type <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
    <li>Validate that the returned document contains a property that complies to one of the GeoJSON <code>Geometry</code> objects mentioned above and contains:
    <ul>
      <li>a property <code>type</code> containing the name of one of the GeoJSON <code>Geometry</code> object types mentioned above, and</li>
      <li>a property <code>coordinates</code> containing an array with the coordinates. Depending on the type of geometry object, the content of the array differs.</li>
    </ul></li>
  </ul>
  <p>
  Test case 2:
  </p>
  <ul>
    <li>Request a collection of resources that contain geometry of GeoJSON <code>Geometry</code> object type: <code>Point</code>, <code>MultiPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code> or <code>MultiPolygon</code> and with response media type <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
    <li>Validate that the returned document contains an array of resources and that each resource contains a property that complies to one of the GeoJSON <code>Geometry</code> objects mentioned above and contains:
    <ul>
      <li>a property <code>type</code> containing the name of one of the GeoJSON <code>Geometry</code> object types mentioned above, and</li>
      <li>a property <code>coordinates</code> containing an array with the coordinates. Depending on the type of geometry object, the content of the array differs.</li>
    </ul></li>
  </ul>
  <p>
  Test case 3:
  </p>
  <ul>
    <li>Request a single resource that contains geometry of GeoJSON <code>Geometry</code> object type: <code>GeometryCollection</code> and with response media type <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
    <li>Validate that the returned document contains a property that complies to the GeoJSON <code>Geometry</code> object mentioned above and contains: 
    <ul>
      <li>a property <code>type</code> containing the name of the GeoJSON <code>Geometry</code> object type: <code>GeometryCollection</code>, and</li>
      <li>a property <code>geometries</code> containing an array of GeoJSON <code>Geometry</code> objects.</li>
    </ul></li>
  </ul>
  <p>
  Test case 4:
  </p>
  <ul>
    <li>Request a collection of resources that contain geometry of GeoJSON <code>Geometry</code> object type: <code>GeometryCollection</code> and with response media type <code>application/json</code> in the <code>Accept</code> header.</li>
    <li>Validate that a response with status code 200 is returned.</li>
    <li>Validate that <code>Content-Type</code> header contains <code>application/json</code></li> 
    <li>Validate that the returned document is a JSON document.</li> 
    <li>Validate that the returned document contains an array of resources and that each resource contains a  property that complies to the GeoJSON <code>Geometry</code> object mentioned above and contains: 
    <ul>
      <li>a property <code>type</code> containing the name of the GeoJSON <code>Geometry</code> object type: <code>GeometryCollection</code>, and</li>
      <li>a property <code>geometries</code> containing an array of GeoJSON <code>Geometry</code> objects.</li>
    </ul></li>
  </ul>
</div>
