
##POST endpoint for geospatial queries

<aside class="note">Two rules related to using a POST endpoint for geospatial queries were deprecated because it is expected that a new API Design Rules module "Filtering" will address the issue of using POST for queries. Until then, the old rules may still be of use.

What follows is the original description of the rules in the old Geospatial Extension. 
</aside>

A spatial filter can be complex and large. It is best practice to supply complex queries in the body, not in the request URI. Since `GET` may not have a payload (although supported by some clients) use a `POST` request to a separate endpoint. For example, a GEO query to all *panden* where the geometry in the field `_geo` (there may be multiple geometry fields) contains a GeoJSON object (in this case a `Point`, so one coordinate pair):

<span name="api-36"></span>
<p class="rulelab"><strong>Deprecated rule (was: API-36)</strong>: Provide a <code>POST</code> endpoint for geo queries</p>

Spatial queries are sent in a `POST` to a dedicated endpoint.
  <pre>
  // POST /api/v1/panden/_zoek with request body:
  {
    "_geo": {
      "contains": {
        "type": "Point",
        "coordinates": [5.9623762, 52.2118093]
      }
    }
  }
  </pre>

Other geospatial operators like `intersects` or `within` can be used as well.

<span name="api-37"></span>
<p class="rulelab"><strong>Deprecated rule (was: API-37)</strong>: Support mixed queries at <code>POST</code> endpoints</p>

The `POST` endpoint is preferably set up as a generic query endpoint to support combined queries:

  <pre>
  // POST /api/v1/panden/_zoek with request body:
  {
    "_geo": {
      "contains": {
        "type": "Point",
        "coordinates": [5.9623762, 52.2118093]
      }
    },
    "status": "Actief"
  }
  </pre>
